{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/types","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"posts":[{"excerpt":"Let's start from the beginning, it was 2015, I was an Angular Developer at the time, it was the glorious era of , ,  and . Angular 2 was becoming  a thing, and the core team started showing this new language,  WTF??  a new language?, who is going toâ€¦","html":"<p>Let's start from the beginning, it was 2015, I was an Angular Developer at the time, it was the glorious era of <code class=\"language-text\">directives</code>, <code class=\"language-text\">services</code>, <code class=\"language-text\">factories</code> and <code class=\"language-text\">controllers</code>. Angular 2 was becoming  a thing, and the core team started showing this new language,  <strong>WTF??</strong>  a new language?, who is going to used that?.  That was my first time I heard about <strong>Typescript</strong> and my first time where I fully embrace <strong>React</strong> :D.</p>\n<p>At the moment, I really didn't understand the need of types, Javascript is pretty cool you have the flexibility to do whatever you want, whenever you want. To the contrary, of languages like <strong>Java</strong> where you have to write 500 lines of code to print <em>Hello World</em>. After been a Java developer for 3 years, I didn't want to happen the same for <strong>JavaScript</strong>.</p>\n<h2 id=\"5-years-later\"><a href=\"#5-years-later\" aria-label=\"5 years later permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5 years later</h2>\n<p>I have to admit, I was blind for my emotions, after 3 years I started understanding why types are important, mostly for bigger teams. Nevertheless, I have never had the opportunity to use it in my previous jobs or personal projects. Now, I cannot live without them. For me is a <strong>must</strong> to started any new project with it.</p>\n<h3 id=\"why\"><a href=\"#why\" aria-label=\"why permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why?</h3>\n<p>Is pretty simple, some of the benefits are:</p>\n<ul>\n<li>Intellisense, if you comes from <em>typed</em> languages like <em>Java</em> you might know this amazing feature where you code just pressing the space bar, with typescript you can do pretty much the same.</li>\n<li>Documentation, as you type your code you are adding metadata that your IDE will use as a documentation, so no more <em>\"this var is a string or is a number? maybe can me undefined?\"</em></li>\n<li>Refactoring, when you have big code bases it makes harder to find all the dependencies every time you want to move a file, or only change the name of a <em>exported</em> function.</li>\n<li>Transpilation, we already transpile our code base (and this is not going to change in the near future). Hence, if we already are going to add in our pipeline babel, it's not to expensive to add <em>@babel/preset-typescript</em></li>\n<li>Libraries, are the ones that get more benefits from this. Free documentation, type definition file generation, etc. Thus, I highly recommend to use it if you are planing to share some code :smirk:</li>\n</ul>\n<blockquote>\n<p>Keep in mind that if you just want to do something very small and simple typescript might not be what you need, and that it's perfect. Old, plain JavaScript will always be there :muscle:.</p>\n</blockquote>\n<p>In conclusion, after using typescript for almost  1 year now, I highly recommend you to try it if you havent.</p>\n<h2 id=\"getting-started\"><a href=\"#getting-started\" aria-label=\"getting started permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting Started</h2>\n<p>As any other build tool to start using it is required to add a configuration file, aka <code class=\"language-text\">tsconfig.json</code>, let's see a small example:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token comment\">// Basic tsconfig example</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/**/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// The files that will compile</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/__tests__/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Exclude your tests</span>\n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./some-lib-definition-file.d.ts\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Usefull to import non existent types for libs</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// We are going to use commonjs modules</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// We are going to use the latest javascript, we might change this for final buil, dont break the web </span>\n    <span class=\"token property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"es2015\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"es2017\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// We add predefined libraries based on what are we using (this will add types for dom elements and all latest features in javascript)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Once you have this configuration in your project, you should install <code class=\"language-text\">typescript</code> package as a dev dependency <code class=\"language-text\">npm i -D typescript</code> or <code class=\"language-text\">yarn add --dev typescript</code> will do the job. Now you should be able to build your project:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn run build:cjs &amp;&amp; yarn run build:esm\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build:cjs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc --project ./tsconfig.json --outDir ./dist/cjs --module commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build:esm\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc --project ./tsconfig.json --outDir ./dist/esm --module esnext\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typecheck\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc --noEmit --project ./tsconfig.typecheck.json\"</span> <span class=\"token comment\">// You might want to have a custom to includes another files.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>That is, it's pretty simple.</p>\n<h3 id=\"integrations\"><a href=\"#integrations\" aria-label=\"integrations permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Integrations</h3>\n<p>Now let's talk about integrations, one thing is to build your package if you are a library, but most of the time you are going to use your current code with existing tools like <code class=\"language-text\">webpack</code>, <code class=\"language-text\">storybook</code>, <code class=\"language-text\">jest</code>, etc. Or you might want to compile using your current babel configuration, that's also possible.</p>\n<h4 id=\"webpack\"><a href=\"#webpack\" aria-label=\"webpack permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Webpack</h4>\n<p>For webpack there are a couple of solutions, but the one I use is <code class=\"language-text\">awesome-typescript-loader</code>,  you just need to add the loader and the resolve extensions:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// webpack.config.js</span>\nmodules<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...,</span>\n  module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(ts|tsx)$/</span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token punctuation\">:</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'awesome-typescript-loader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//...,</span>\n  resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    extensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'tsx'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//...,</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This also work for Storybook:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">//./storybook/webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> config <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  config<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(ts|tsx)$/</span><span class=\"token punctuation\">,</span>\n    loader<span class=\"token punctuation\">:</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'awesome-typescript-loader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  config<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">.</span>extensions<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.tsx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"jest\"><a href=\"#jest\" aria-label=\"jest permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jest</h4>\n<p>For jest we are going to use <code class=\"language-text\">ts-jest</code>, it comes with predefined presets:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// jest.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  preset<span class=\"token punctuation\">:</span> <span class=\"token string\">'ts-jest'</span><span class=\"token punctuation\">,</span>\n  globals<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'ts-jest'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      diagnostics<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> \t<span class=\"token comment\">// We dont want to check types on our tests</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  testMatch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'**/__tests__/*.+(ts|tsx|js)'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"babel\"><a href=\"#babel\" aria-label=\"babel permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel</h4>\n<p>As an alternative you can transpile your typescript files using babel, the benefits of doing this is that you take advantage of your current pipeline to process the files. However, your are going to miss build types validation, and  it doesnt support fancy stuff like <code class=\"language-text\">const enumns</code> or <code class=\"language-text\">namespace</code>, also is going to ignore most of your <code class=\"language-text\">tsconfig.json</code> file. To use it with babel you just have to add <code class=\"language-text\">@babel/preset-typescript</code> in your config:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">{  \n\t&quot;presets&quot;: [&quot;@babel/preset-typescript&quot;] \n} </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"protips\"><a href=\"#protips\" aria-label=\"protips permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Protips</h3>\n<p>Now, I will share few tips that I would like to know before start with typescript:</p>\n<h4 id=\"1-custom-file-for-shared-types\"><a href=\"#1-custom-file-for-shared-types\" aria-label=\"1 custom file for shared types permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Custom file for shared types</h4>\n<p>It might sound smart to have the type definition in the same file as the implementation, it bring you a lot of flexibility to change the definition everytime you want to change the code, actually, that works perfect for <strong>React</strong> props. </p>\n<p>Despite of that, we need to be aware about what types are used for other components to reduce internal dependencies, remember that typescript will remove all the types from the modules, thus, all the extra code will be there, causing an internal dependency to an external module just for importing a type. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token comment\">// User.tsx</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// Bad</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\">User</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*fancy hook to retrieve the user*/</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> User<span class=\"token punctuation\">:</span> FunctionComponent<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">useUser</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token comment\">//someting</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// a file that use the user to do something</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span> User<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./User'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Is importing the type definition, but it has to load the whole User (including react + component code)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUsername</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">:</span> User</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>user<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>user<span class=\"token punctuation\">.</span>last_name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In the above case, if we want to test only the <code class=\"language-text\">getUsername</code> function, <em>Jest</em> will have to load React and the User component even if we are not going to used it. Noticed that is a small case, now imagine a big monorepo where the package <code class=\"language-text\">Y</code> import <code class=\"language-text\">User</code> from this package, the build/jest times are going to goes up, even could affect bundle size of the application if <em>tree-shaking</em> is not well configured.</p>\n<p>My recommendation just create a <code class=\"language-text\">types.ts</code> file with just the shared type of a component, the above example can be rewrite as:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token comment\">//./user/types.tsx</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// Good</span>\n\n<span class=\"token comment\">// ./user/User.tsx</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\">User</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*fancy hook to retrieve the user*/</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> User<span class=\"token punctuation\">:</span> FunctionComponent<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">useUser</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token comment\">//someting</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ./user/utils.tsx</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span> User<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// just import all the types, no source code</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUsername</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token punctuation\">:</span> User</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>user<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>user<span class=\"token punctuation\">.</span>last_name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4 id=\"2-interface-over-class-definition\"><a href=\"#2-interface-over-class-definition\" aria-label=\"2 interface over class definition permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Interface over class definition</h4>\n<p>By default typescript will create a new type every time you do a new class, this works properly most of the time, but as in the previous case when you need to share the type and not the code this start to become a problem, let's see a small example:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token comment\">// dnd-provider.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DnDProvider</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">findRace</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Race <span class=\"token punctuation\">{</span><span class=\"token comment\">/*some code*/</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">findMonster</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Monster <span class=\"token punctuation\">{</span><span class=\"token comment\">/*some code*/</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">/*some code*/</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// app.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DndProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./dnd-provider.ts'</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  dndProvider<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> DndProvider<span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> App<span class=\"token punctuation\">:</span> FunctionCompomnet<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> dndProvider<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*Do something */</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As you can noticed, we are loading a whole class implementation just to type our component and the worst part is, that it's an optional prop, so we might no need it in our app :man_facepalming:. Now lets a look to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token comment\">// types.ts</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">RpgProvider</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">findRace</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Race<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">findMonster</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Monster<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token comment\">/*others methods*/</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// dnd-provider.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DnDProvider</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RpgProvider</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">{</span><span class=\"token comment\">/*implementation*/</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// pathfinder-provider.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PathfinderProvider</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RpgProvider</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">{</span><span class=\"token comment\">/*implementation*/</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// app.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RpgProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types.ts'</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  rpgProvider<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> RpgProvider<span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> App<span class=\"token punctuation\">:</span> FunctionCompomnet<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> rpgProvider<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*Do something */</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We are combining the solution on point one together with <code class=\"language-text\">interface</code> and <code class=\"language-text\">implements</code>, we created a new generic interface on his own file to allow reusability without extra source code, and we are using it in two different providers. At the beginning, <code class=\"language-text\">implements</code> would be confusing, it works pretty different to other languages, you will have to type each function by yourself :cry:, <em>inference</em> doesn't work.</p>\n<h4 id=\"3-inference-using-generic\"><a href=\"#3-inference-using-generic\" aria-label=\"3 inference using generic permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Inference using generic</h4>\n<p>One of the most amazing features of typescript is called type inference, this is done at any moment for every piece of code you create, that's how typescript can work with old Javascript. In addition, we can do really complex inference, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Providers</span> <span class=\"token punctuation\">{</span>\n  aProvider<span class=\"token punctuation\">:</span> AProvider<span class=\"token punctuation\">,</span>\n  bProvider<span class=\"token punctuation\">:</span> BProvider<span class=\"token punctuation\">,</span>\n  cProvider<span class=\"token punctuation\">:</span> CProvider<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> useProvider <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Providers<span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Providers<span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> aProvider <span class=\"token operator\">=</span> <span class=\"token function\">useProvider</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aProvider'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type is AProvider</span>\n<span class=\"token keyword\">const</span> cProvider <span class=\"token operator\">=</span> <span class=\"token function\">useProvider</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cProvider'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type is CProvider</span>\n<span class=\"token keyword\">const</span> aProvider <span class=\"token operator\">=</span> <span class=\"token function\">useProvider</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aProvider'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type is any</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This is one of the way to apply the inference, as you can see, we are using the generic type to extract the type from a <code class=\"language-text\">Providers</code> interface, the potential of this is big, now we can write generic functions and just using a string we are going to get the correct type :open_mouth:. This is not the only example, lets try something more advance, Have you heard of react HOC? I know they are not recommended now, but let's try to type a custom <strong>HOC</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token comment\">// our hook</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> withTheme <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>Props <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> theme<span class=\"token punctuation\">:</span> Theme <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">WrappedComponent<span class=\"token punctuation\">:</span> ComponentType<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span><span class=\"token punctuation\">,</span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> WithTheme<span class=\"token punctuation\">:</span> FunctionComponent<span class=\"token operator\">&lt;</span>Omit<span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> <span class=\"token string\">'theme'</span><span class=\"token operator\">>></span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> theme <span class=\"token operator\">=</span> <span class=\"token function\">useTheme</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>WrappedComponent theme<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>props <span class=\"token keyword\">as</span> Props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> WithTheme<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// our component</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ButtonProps</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  theme<span class=\"token punctuation\">:</span> Theme<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>etc<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> Button<span class=\"token punctuation\">:</span> FunctionComponent<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> theme<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ThemedButton <span class=\"token operator\">=</span> <span class=\"token function\">withTheme</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The type is FunctionComponent&lt;Pick&lt;ButtonProps, 'name' | 'value'>></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Oh cool, the final component has all the props from button except the <code class=\"language-text\">theme</code>, even if I never specified the original props when I called <code class=\"language-text\">withTheme</code>, and this can be extended even more. Let's talked about that in another section.</p>\n<h4 id=\"4-extracting-values-from-custom-types\"><a href=\"#4-extracting-values-from-custom-types\" aria-label=\"4 extracting values from custom types permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Extracting values from custom types</h4>\n<p>When you started using <em>generics</em>, you start facing another big issue, how to get values from them? React. for example offers a set of helper to extract <em>Props</em> from an component with only the type. You might want to implement this in your own types. Let's create a simple interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token comment\">// types.ts</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span><span class=\"token operator\">&lt;</span>Attributes <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  last_name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  attributes<span class=\"token punctuation\">:</span> Attributes<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> UserAttributes<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">User</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token operator\">?</span> <span class=\"token constant\">A</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// utils.ts</span>\n<span class=\"token keyword\">function</span> getUserAttributes<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">User</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> UserAttributes<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In line 4, we created an alias using the <code class=\"language-text\">type</code> syntax, lets explain what is doing:</p>\n<ol>\n<li>Created an alias named <code class=\"language-text\">UserAttributes</code></li>\n<li>Add a generic value <code class=\"language-text\">&lt;T&gt;</code>, it will be required and could be any type.</li>\n<li>\n<p>We checked if the generic <code class=\"language-text\">T</code> value extends <code class=\"language-text\">User</code></p>\n<ol>\n<li>We used special <code class=\"language-text\">&lt;infer A&gt;</code> syntax to <em>infer</em> the <code class=\"language-text\">Attribute</code> of the current type.</li>\n</ol>\n</li>\n<li>If is true, we returned the <em>infered</em> type <code class=\"language-text\">A</code>.</li>\n<li>if is false, we returned <code class=\"language-text\">never</code>.</li>\n</ol>\n<p>In conclusion, with this small alias we can extract the attributes of any new <code class=\"language-text\">User</code> before hand. This is an small example, but you can imagine the potential we have in the big picture :tada:.</p>\n<h4 id=\"5-use-mapped-types\"><a href=\"#5-use-mapped-types\" aria-label=\"5 use mapped types permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Use mapped types</h4>\n<h4 id=\"6-recursive-types-advance\"><a href=\"#6-recursive-types-advance\" aria-label=\"6 recursive types advance permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Recursive types (Advance)</h4>","id":"4f0278ca-3ffd-5a3e-8a34-3aae7376d987","fields":{"slug":"a-journey-into-typed-java-script"},"frontmatter":{"date":"2018-07-17","title":"A journey into typed JavaScript","category":"Technology","tags":["types","js","javascript","typescript"],"banner":null},"timeToRead":10}],"tagName":"types"}}}